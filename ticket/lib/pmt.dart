import 'package:flutter/material.dart';
import 'package:razorpay_flutter/razorpay_flutter.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'PrevTrans.dart';
// import 'package:ticket/pages/login_page.dart';

void main() {
  runApp(PaymentMethod(placeName: 'name'));
}

class PaymentMethod extends StatelessWidget {
  final String placeName;

  const PaymentMethod({Key? key, required this.placeName}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Payment Gateway',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      // home: PaymentMethodPage(
      //   title: 'Payment Options',
      //   placeName: placeName,
      //   autogeneratedId: '',
      //   userEmail: '',
      // ),
    );
  }
}

class PaymentMethodPage extends StatefulWidget {
  const PaymentMethodPage({
    Key? key,
    required this.title,
    required this.placeName,
    required this.autogeneratedId,
    required this.userEmail,
  }) : super(key: key);

  final String title;
  final String placeName;
  final String autogeneratedId;
  final String userEmail;

  @override
  State<PaymentMethodPage> createState() => PaymentMethodState(
        placeName: placeName,
        autogeneratedId: autogeneratedId,
        userEmail: userEmail,
      );
}

class PaymentMethodState extends State<PaymentMethodPage> {
  final String placeName;
  final String autogeneratedId;
  int adultTicketPrice = 0;
  int childTicketPrice = 0;
  int foreignerTicketPrice = 0;
  int adultTickets = 0;
  int childTickets = 0;
  int foreignerTickets = 0;
  final String userEmail;

  PaymentMethodState({
    required this.placeName,
    required this.autogeneratedId,
    required this.userEmail,
  });

  Future<void> fetchTicketPrices() async {
    try {
      DocumentSnapshot<Map<String, dynamic>> snapshot = await FirebaseFirestore
          .instance
          .collection('historical_places')
          .doc(autogeneratedId)
          .get();

      if (snapshot.exists) {
        setState(() {
          adultTicketPrice = snapshot.data()!['adultTicketPrice'] ?? 0;
          childTicketPrice = snapshot.data()!['childTicketPrice'] ?? 0;
          foreignerTicketPrice = snapshot.data()!['foreignerTicketPrice'] ?? 0;
        });
      }
    } catch (e) {
      print('Error fetching ticket prices: $e');
    }
  }

  @override
  void initState() {
    super.initState();
    fetchTicketPrices();
  }

  int calculateTotalAmount() {
    return (adultTickets * adultTicketPrice) +
        (childTickets * childTicketPrice) +
        (foreignerTickets * foreignerTicketPrice);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: <Widget>[
              Card(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15.0),
                ),
                elevation: 4.0,
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    children: [
                      Text(
                        'Booking Ticket for: $placeName',
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 16),
                      Table(
                        // columnWidths: {
                        //   0: FlexColumnWidth(2),
                        //   1: FlexColumnWidth(1),
                        // },
                        children: [
                          TableRow(children: [
                            TableCell(
                              child: Text('Adult Tickets: ',
                                  style: TextStyle(fontSize: 18)),
                            ),
                            TableCell(
                              child: Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  ElevatedButton(
                                    onPressed: () {
                                      setState(() {
                                        adultTickets++;
                                      });
                                    },
                                    child: Text('Add'),
                                  ),
                                  Text('$adultTickets'),
                                  ElevatedButton(
                                    onPressed: () {
                                      if (adultTickets > 0) {
                                        setState(() {
                                          adultTickets--;
                                        });
                                      }
                                    },
                                    child: Text('Remove'),
                                  ),
                                ],
                              ),
                            ),
                          ]),
                          TableRow(children: [
                            TableCell(
                              child: Text('Child Tickets:  ',
                                  style: TextStyle(fontSize: 18)),
                            ),
                            TableCell(
                              child: Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  ElevatedButton(
                                    onPressed: () {
                                      setState(() {
                                        childTickets++;
                                      });
                                    },
                                    child: Text('Add'),
                                  ),
                                  Text('$childTickets'),
                                  ElevatedButton(
                                    onPressed: () {
                                      if (childTickets > 0) {
                                        setState(() {
                                          childTickets--;
                                        });
                                      }
                                    },
                                    child: Text('Remove'),
                                  ),
                                ],
                              ),
                            ),
                          ]),
                          TableRow(children: [
                            TableCell(
                              child: Text('Foreigner Tickets: ',
                                  style: TextStyle(fontSize: 18)),
                            ),
                            TableCell(
                              child: Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  ElevatedButton(
                                    onPressed: () {
                                      setState(() {
                                        foreignerTickets++;
                                      });
                                    },
                                    child: Text('Add'),
                                  ),
                                  Text('$foreignerTickets'),
                                  ElevatedButton(
                                    onPressed: () {
                                      if (foreignerTickets > 0) {
                                        setState(() {
                                          foreignerTickets--;
                                        });
                                      }
                                    },
                                    child: Text('Remove'),
                                  ),
                                ],
                              ),
                            ),
                          ]),
                          TableRow(children: [
                            TableCell(
                              child: Text('Adult Tickets: ',
                                  style: TextStyle(fontSize: 18)),
                            ),
                            TableCell(
                              child: Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  Text('Price $adultTicketPrice',
                                      style: TextStyle(fontSize: 18)),
                                ],
                              ),
                            ),
                          ]),
                          TableRow(children: [
                            TableCell(
                              child: Text('Child Tickets: ',
                                  style: TextStyle(fontSize: 18)),
                            ),
                            TableCell(
                              child: Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  Text('Price $childTicketPrice',
                                      style: TextStyle(fontSize: 18)),
                                ],
                              ),
                            ),
                          ]),
                          TableRow(children: [
                            TableCell(
                              child: Text('Foreigner Tickets: ',
                                  style: TextStyle(fontSize: 18)),
                            ),
                            TableCell(
                              child: Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  Text('Price $foreignerTicketPrice',
                                      style: TextStyle(fontSize: 18)),
                                ],
                              ),
                            ),
                          ]),
                        ],
                      ),
                      const SizedBox(height: 16),
                      Text(
                        'Total Amount: ${calculateTotalAmount()}',
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  Razorpay razorpay = Razorpay();
                  int totalAmount = calculateTotalAmount();
                  var options = {
                    'key': 'rzp_test_wjnOwkRSV0FoB3',
                    'amount': totalAmount * 100,
                    'name': 'E-Ticket',
                    'description': 'Ticket payment',
                    'retry': {'enabled': true, 'max_count': 1},
                    'send_sms_hash': true,
                    'prefill': {
                      'contact': '8888888888',
                      'email': 'test@razorpay.com',
                    },
                    'external': {
                      'wallets': ['paytm'],
                    },
                  };
                  razorpay.on(
                      Razorpay.EVENT_PAYMENT_ERROR, handlePaymentErrorResponse);
                  razorpay.on(Razorpay.EVENT_PAYMENT_SUCCESS,
                      handlePaymentSuccessResponse);
                  razorpay.on(Razorpay.EVENT_EXTERNAL_WALLET,
                      handleExternalWalletSelected);
                  razorpay.open(options);
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                ),
                child: const Text("Pay with Razorpay"),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void handlePaymentErrorResponse(PaymentFailureResponse response) {
    showAlertDialog(context, "Payment Failed",
        "Code: ${response.code}\nDescription: ${response.message}\nMetadata:${response.error.toString()}");
  }

  // void handlePaymentSuccessResponse(PaymentSuccessResponse response) {
  //   showAlertDialog(
  //       context, "Payment Successful", "Payment ID: ${response.paymentId}");
  //   Navigator.push(
  //     context,
  //     MaterialPageRoute(
  //       builder: (context) => TicketPage(
  //         adultTickets: adultTickets,
  //         childTickets: childTickets,
  //         foreignerTickets: foreignerTickets,
  //         totalAmount: calculateTotalAmount(),
  //         placeName: placeName,
  //         userEmail: userEmail,
  //       ),
  //     ),
  //   );
  // }

  void handlePaymentSuccessResponse(PaymentSuccessResponse response) async {
    showAlertDialog(
      context,
      "Payment Successful",
      "Payment ID: ${response.paymentId}",
    );

    // Add payment details to Firestore
    await addPaymentToFirestore(response.paymentId!);

    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => TicketPage(
          adultTickets: adultTickets,
          childTickets: childTickets,
          foreignerTickets: foreignerTickets,
          totalAmount: calculateTotalAmount(),
          placeName: placeName,
          userEmail: userEmail,
          paymentId: response.paymentId!,
        ),
      ),
    );
    // Navigator.popUntil(context, (route) => route.isFirst);
  }

// Add this method to handle Firestore update
  Future<void> addPaymentToFirestore(String paymentId) async {
    try {
      await FirebaseFirestore.instance.collection('payments').add({
        'placeName': placeName,
        'userEmail': userEmail,
        'adultTickets': adultTickets,
        'childTickets': childTickets,
        'foreignerTickets': foreignerTickets,
        'bookingDate': FieldValue.serverTimestamp(),
        'bookingTime': FieldValue.serverTimestamp(),
        'totalAmount': calculateTotalAmount(),
        'ticketBookedFor':
            FieldValue.serverTimestamp(), // Update with the actual date field
        'paymentId': paymentId,
      });
      print('Payment details added to Firestore successfully.');
    } catch (e) {
      print('Error adding payment details to Firestore: $e');
    }
  }

  void handleExternalWalletSelected(ExternalWalletResponse response) {
    showAlertDialog(
        context, "External Wallet Selected", "${response.walletName}");
  }

  void showAlertDialog(BuildContext context, String title, String message) {
    Widget continueButton = ElevatedButton(
      child: const Text("Continue"),
      onPressed: () {
        Navigator.of(context).pop();
      },
    );
    AlertDialog alert = AlertDialog(
      title: Text(title),
      content: Text(message),
      actions: [
        continueButton,
      ],
    );
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return alert;
      },
    );
  }
}

class TicketPage extends StatelessWidget {
  final int adultTickets;
  final int childTickets;
  final int foreignerTickets;
  final int totalAmount;
  final String placeName;
  final String userEmail;
  final String paymentId;
  TicketPage({
    required this.adultTickets,
    required this.childTickets,
    required this.foreignerTickets,
    required this.totalAmount,
    required this.placeName,
    required this.userEmail,
    required this.paymentId,
  });

  @override
  Widget build(BuildContext context) {
    DateTime currentDate = DateTime.now();
    DateTime bookingDateTime = DateTime(
      currentDate.year,
      currentDate.month,
      currentDate.day,
      currentDate.hour,
      currentDate.minute,
    );

    if (currentDate.hour >= 17) {
      // If booking is after 5 pm, show date and time of next day
      bookingDateTime = bookingDateTime.add(Duration(days: 1));
    }

    String formattedDate =
        "${bookingDateTime.day}/${bookingDateTime.month}/${bookingDateTime.year}";
    String currTime = "${currentDate.hour}:${currentDate.minute}";
    String currDate =
        "${currentDate.day}/${currentDate.month}/${currentDate.year}";

    return Scaffold(
      appBar: AppBar(
        title: Text('Ticket Details'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            Card(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(15.0),
              ),
              color: Colors.blue.withOpacity(0.2),
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Ticket Generated for: $placeName',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Colors.blue,
                      ),
                    ),
                    const SizedBox(height: 16),
                    Text(
                      'Ticket Generated for: $userEmail',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Colors.blue,
                      ),
                    ),
                    const SizedBox(height: 16),
                    TicketInfo(
                      title: 'Adult Ticket',
                      quantity: adultTickets,
                    ),
                    TicketInfo(
                      title: 'Child Ticket',
                      quantity: childTickets,
                    ),
                    TicketInfo(
                      title: 'Foreigner Ticket',
                      quantity: foreignerTickets,
                    ),
                    const SizedBox(height: 16),
                    Text(
                      'Ticket booked for: $formattedDate',
                      style: TextStyle(fontSize: 20, color: Colors.black87),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Booking Time: $currTime | Booking Date: $currDate',
                      style: TextStyle(fontSize: 20, color: Colors.black87),
                    ),
                    const SizedBox(height: 16),
                    Text(
                      'Total Amount: $totalAmount',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Colors.blue,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => PrevTransPage(userEmail: userEmail),
                  ),
                );
              },
              child: Text('View Previous Transactions'),
            )
          ],
        ),
      ),
    );
  }
}

class TicketInfo extends StatelessWidget {
  final String title;
  final int quantity;

  TicketInfo({required this.title, required this.quantity});

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          '$title:',
          style: TextStyle(fontSize: 18, color: Colors.black87),
        ),
        Text(
          '$quantity',
          style: TextStyle(fontSize: 18, color: Colors.black87),
        ),
      ],
    );
  }
}
